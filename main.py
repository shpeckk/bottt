from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.callback_data import CallbackData
import os
import re

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –∫–æ–Ω—Ñ–∏–≥  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
API_TOKEN = os.getenv("BOT_TOKEN")
STAFF_CHAT = int(os.getenv("STAFF_CHAT_ID"))

if not API_TOKEN or not STAFF_CHAT:
    raise RuntimeError("BOT_TOKEN –∏ STAFF_CHAT_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–¥–∞–Ω—ã –≤ Render ‚Üí Environment!")

bot = Bot(API_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())

order_cb = CallbackData("order", "action", "user_id")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  FSM  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class Order(StatesGroup):
    strength = State()
    flavors = State()
    additive = State()
    phone = State()
    comment = State()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def main_menu_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω", "–ú–µ–Ω—é –∏ —Ü–µ–Ω—ã")
    return kb

def additive_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–æ–ª–æ–∫–æ (+200)", "–í–∏–Ω–æ (+400)")
    kb.add("–ê–±—Å–µ–Ω—Ç (+500)", "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫ (+0)")
    kb.add("–û—Ç–º–µ–Ω–∞")
    return kb

def cancel_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–û—Ç–º–µ–Ω–∞")
    return kb

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  —Å—Ç–∞—Ä—Ç / –æ—Ç–º–µ–Ω–∞  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(commands="start", state="*")
async def cmd_start(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

@dp.message_handler(lambda x: x.text == "–û—Ç–º–µ–Ω–∞", state="*")
async def any_cancel(m: types.Message, state: FSMContext):
    await state.finish()
    await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=main_menu_kb())

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –∑–∞–∫–∞–∑ –∫–∞–ª—å—è–Ω–∞  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message_handler(lambda x: x.text == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω", state="*")
async def start_order(m: types.Message, state: FSMContext):
    # –§–∏–∫—Å —Ü–µ–Ω—ã –∏ —á–∞—à–∏
    await state.update_data(price=3000, bowl="–ö–∞–ª—å—è–Ω –Ω–∞ —á–∞—à–µ")
    await Order.strength.set()
    await m.answer("–ö—Ä–µ–ø–æ—Å—Ç—å –æ—Ç 1 –¥–æ 10 (–º–æ–∂–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω 6-7, 8-10):", reply_markup=cancel_kb())

@dp.message_handler(state=Order.strength)
async def set_strength(m: types.Message, state: FSMContext):
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫—Ä–µ–ø–æ—Å—Ç–∏: –ª–∏–±–æ —á–∏—Å–ª–æ 1-10, –ª–∏–±–æ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–∏–¥–∞ 6-7 –∏–ª–∏ 8-10
    strength = m.text.strip()
    pattern = r"^([1-9]|10)(-([1-9]|10))?$"
    match = re.match(pattern, strength)
    if not match:
        await m.answer("–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: 6-7, 8-10.",
                       reply_markup=cancel_kb())
        return
    # –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –ª–µ–≤–∞—è —á–∞—Å—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–∞–≤–æ–π
    if '-' in strength:
        left, right = strength.split('-')
        if int(left) >= int(right):
            await m.answer("–î–∏–∞–ø–∞–∑–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω, –ª–µ–≤–∞—è —á–∞—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ –ø—Ä–∞–≤–æ–π.",
                           reply_markup=cancel_kb())
            return
    await state.update_data(strength=strength)
    await Order.next()
    await m.answer("–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –≤–∫—É—Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—Ä—É–∫—Ç–æ–≤—ã–π —Å —Ö–æ–ª–æ–¥–∫–æ–º):", reply_markup=cancel_kb())

@dp.message_handler(state=Order.flavors)
async def set_flavors(m: types.Message, state: FSMContext):
    text = m.text.strip()
    if len(text) == 0:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –≤–∫—É—Å–∞–º –∏–ª–∏ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.", reply_markup=cancel_kb())
        return
    await state.update_data(flavors=text)
    await Order.next()
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É:", reply_markup=additive_kb())

@dp.message_handler(state=Order.additive)
async def set_additive(m: types.Message, state: FSMContext):
    prices = {
        "–ú–æ–ª–æ–∫–æ (+200)": 200,
        "–í–∏–Ω–æ (+400)": 400,
        "–ê–±—Å–µ–Ω—Ç (+500)": 500,
        "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫ (+0)": 0
    }
    if m.text not in prices:
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:", reply_markup=additive_kb())
        return
    await state.update_data(additive=m.text, addon_price=prices[m.text])
    await Order.next()
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (Telegram / WhatsApp):", reply_markup=cancel_kb())

@dp.message_handler(state=Order.phone)
async def set_phone(m: types.Message, state: FSMContext):
    phone = m.text.strip()
    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî —Ü–∏—Ñ—Ä—ã –∏ +, –¥–ª–∏–Ω–∞ 7-15
    if not re.fullmatch(r"[\d\+\-\(\)\s]{7,15}", phone):
        await m.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä Telegram –∏–ª–∏ WhatsApp.",
                       reply_markup=cancel_kb())
        return
    await state.update_data(phone=phone)
    await Order.next()
    await m.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏–ª–∏ ¬´-¬ª:",
                   reply_markup=cancel_kb())

@dp.message_handler(state=Order.comment)
async def finish_order(m: types.Message, state: FSMContext):
    comment = m.text.strip()
    if comment == "-":
        comment = "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    await state.update_data(comment=comment)

    data = await state.get_data()
    total = data["price"] + data["addon_price"]
    user_tag = f"@{m.from_user.username}" if m.from_user.username else m.from_user.full_name

    order_txt = (
        f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–∞–ª—å—è–Ω–∞:</b>\n\n"
        f"–ì–æ—Å—Ç—å: {user_tag}\n"
        f"–ß–∞—à–∞: {data['bowl']} ‚Äî {data['price']}‚ÇΩ\n"
        f"–ö—Ä–µ–ø–æ—Å—Ç—å: {data['strength']}\n"
        f"–î–æ–±–∞–≤–∫–∞: {data['additive']}\n"
        f"–í–∫—É—Å—ã: {data['flavors']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}\n"
        f"<b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>\n"
        f"–û–ø–ª–∞—Ç–∞: –Ω–∞–ª–∏—á–Ω—ã–µ/–ø–µ—Ä–µ–≤–æ–¥.\n\n"
        f"–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
    )

    kb = types.InlineKeyboardMarkup()
    kb.add(
        types.InlineKeyboardButton(
            "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=order_cb.new(action="ok", user_id=m.from_user.id)),
        types.InlineKeyboardButton(
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=order_cb.new(action="cancel", user_id=m.from_user.id)),
    )

    await bot.send_message(STAFF_CHAT, order_txt, reply_markup=kb)
    await m.answer("–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º üòä", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –æ–±—Ä–∞–±–æ—Ç–∫–∞ inline‚Äë–∫–Ω–æ–ø–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query_handler(order_cb.filter())
async def cb_staff(query: types.CallbackQuery, callback_data: dict):
    action = callback_data["action"]
    user_id = int(callback_data["user_id"])

    if action == "ok":
        new_text = query.message.html_text.replace("‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
        status = "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω!"
    else:
        new_text = query.message.html_text.replace("‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω", "‚ùå –û—Ç–º–µ–Ω—ë–Ω")
        status = "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω."

    await query.message.edit_text(new_text, reply_markup=None)
    try:
        await bot.send_message(user_id, status)
    except Exception as e:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    await query.answer("–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –∑–∞–ø—É—Å–∫  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)