from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import os

API_TOKEN = os.getenv("BOT_TOKEN")
STAFF_CHAT_ID = os.getenv("BOT_STAFF_CHAT_ID")  # –ù–∞–ø—Ä–∏–º–µ—Ä: -100123456789

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderHookah(StatesGroup):
    strength = State()
    flavors = State()
    additive = State()
    phone = State()
    comment = State()
    confirm = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message_handler(commands=['start'], state='*')
async def start_menu(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω", "–ú–µ–Ω—é")
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda m: m.text == "–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω", state='*')
async def order_start(message: types.Message, state: FSMContext):
    await state.update_data(price=3000, bowl="–ö–∞–ª—å—è–Ω –Ω–∞ —á–∞—à–µ")
    await OrderHookah.strength.set()
    cancel_kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    cancel_kb.add("–û—Ç–º–µ–Ω–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å –∫–∞–ª—å—è–Ω–∞ –æ—Ç 1 –¥–æ 10 (–º–æ–∂–Ω–æ –¥–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä: 6-7, 8-10):", reply_markup=cancel_kb)

# –û—Ç–º–µ–Ω–∞
@dp.message_handler(lambda m: m.text == "–û—Ç–º–µ–Ω–∞", state='*')
async def cancel_order(message: types.Message, state: FSMContext):
    await state.finish()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ó–∞–∫–∞–∑–∞—Ç—å –∫–∞–ª—å—è–Ω", "–ú–µ–Ω—é")
    await message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é.", reply_markup=keyboard)

# –ö—Ä–µ–ø–æ—Å—Ç—å
@dp.message_handler(state=OrderHookah.strength)
async def set_strength(message: types.Message, state: FSMContext):
    await state.update_data(strength=message.text)
    await OrderHookah.next()
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –≤–∫—É—Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—Ä—É–∫—Ç–æ–≤—ã–π —Å —Ö–æ–ª–æ–¥–∫–æ–º):")

# –í–∫—É—Å—ã
@dp.message_handler(state=OrderHookah.flavors)
async def set_flavors(message: types.Message, state: FSMContext):
    await state.update_data(flavors=message.text)
    await OrderHookah.next()

    buttons = [
        types.KeyboardButton("–ú–æ–ª–æ–∫–æ (+200)"),
        types.KeyboardButton("–í–∏–Ω–æ (+400)"),
        types.KeyboardButton("–ê–±—Å–µ–Ω—Ç (+500)"),
        types.KeyboardButton("–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫ (+0)")
    ]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True).add(*buttons)
    markup.add("–û—Ç–º–µ–Ω–∞")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–∫—É:", reply_markup=markup)

# –î–æ–±–∞–≤–∫–∞
@dp.message_handler(state=OrderHookah.additive)
async def set_additive(message: types.Message, state: FSMContext):
    additives = {
        "–ú–æ–ª–æ–∫–æ (+200)": 200,
        "–í–∏–Ω–æ (+400)": 400,
        "–ê–±—Å–µ–Ω—Ç (+500)": 500,
        "–ë–µ–∑ –¥–æ–±–∞–≤–æ–∫ (+0)": 0
    }
    selected = message.text
    if selected not in additives:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–æ–∫.")
        return

    await state.update_data(additive=selected, addon_price=additives[selected])
    await OrderHookah.next()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (Telegram / WhatsApp):", reply_markup=types.ReplyKeyboardMarkup(resize_keyboard=True).add("–û—Ç–º–µ–Ω–∞"))

# –¢–µ–ª–µ—Ñ–æ–Ω
@dp.message_handler(state=OrderHookah.phone)
async def set_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await OrderHookah.next()
    await message.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ). –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å '–û—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
@dp.message_handler(state=OrderHookah.comment)
async def set_comment(message: types.Message, state: FSMContext):
    comment = message.text if message.text != "–û—Ç–º–µ–Ω–∞" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    await state.update_data(comment=comment)
    await OrderHookah.next()

    data = await state.get_data()
    total = data['price'] + data['addon_price']

    order_text = (
        f"<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–∞–ª—å—è–Ω–∞:</b>\n"
        f"–ì–æ—Å—Ç—å: @{message.from_user.username or message.from_user.full_name}\n"
        f"–ß–∞—à–∞: {data['bowl']} ‚Äî {data['price']}‚ÇΩ\n"
        f"–ö—Ä–µ–ø–æ—Å—Ç—å: {data['strength']}\n"
        f"–î–æ–±–∞–≤–∫–∞: {data['additive']}\n"
        f"–í–∫—É—Å—ã: {data['flavors']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        f"<b>–ò—Ç–æ–≥–æ: {total}‚ÇΩ</b>\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –Ω–∞–ª–∏—á–Ω—ã–µ / –ø–µ—Ä–µ–≤–æ–¥\n\n"
        f"–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    await bot.send_message(chat_id=STAFF_CHAT_ID, text=order_text, parse_mode="HTML")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üôå", reply_markup=types.ReplyKeyboardRemove())
    await state.finish()
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)